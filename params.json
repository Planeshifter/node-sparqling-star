{"name":"Node-sparqling-star","tagline":"node.js client for creating SPARQL queries and communicating with services like DBpedia","body":"[![NPM version](https://badge.fury.io/js/sparqling-star.svg)](http://badge.fury.io/js/sparqling-star)\r\n\r\nnode-SPARQLing Star\r\n===================\r\n\r\n# Introduction\r\n\r\nThis package allows you to create SPARQL calls via JavaScrapt object notation and to query a SPARQL endpoint and fetch the results \r\n\r\n## What it is about?\r\n\r\nUsing the query language SPARQL (Simple Protocol and RDF Query Language) allows to retrieve machine-readable data stored in RDF. RDF stands for Resource Description Framework and is a way to store data in triplets, following the syntactical structure of subject, predicate and noun. In a very practical sense, it gives an access point to semantic web technologies and databases. One of the prime examples is the DBpedia, which is the machine-readable form of Wikipedia. DBpedia allows you to understand the Wikipedia as a big, structured database from which one can extract valuable information.  \r\n\r\n# Getting Started\r\n\r\nTo install the package, call \r\n\r\n```\r\nnpm install sparqling-star\r\n```\r\n\r\nfrom your working directory. To require the package in a *.js file, use the usual syntax:\r\n\r\n```\r\nvar sparqler = require('sparqling-star');\r\n```\r\n\r\nIf you are interested in using the package not only on the server, but also client-sided, you could use the *Browserify* to convert your code into one single *.js file which can easily be embedded in an html document. \r\n\r\n## Quick Overview\r\n\r\nTo give you an idea how the package, we are going through the steps of creating a call to DBpedia and printing the fetched results to the console. Our objective is to load all the names of the music albums from Eminem. After loading the package, we can construct a query object as follows:\r\n\r\n\r\n```\r\nvar myquery = new sparqls.Query();\r\n```\r\n\r\nThis is an empty query object, so we have to add some information. Our *myquery* object expects JavaScript objects to perform the search. First, we create an *album* object which specifies the properties that we wish to retrieve.\r\n\r\n```\r\nvar album = { \r\n  \"type\": \"dbpedia-owl:Album\",\r\n  \"dbpedia-owl:artist\" : \"dbpedia:Eminem\"\r\n  };\r\n```\r\n\r\nIn this object, the keys represent the RDF predicates and the right-hand side our search values. \r\n\r\nThen we have to register the query object in our query: \r\n```\r\nmyquery.registerVariable(\"album\", album);\r\n``` \r\n\r\nBehind the scenes, this creates a valid SPARQL call. To retrieve the code, you can access the *sparqlQuery* property of the *myquery* object as in `myquery.sparqlQuery` which will print out\r\n\r\n```\r\nSELECT * WHERE { \r\n?album a dbpedia-owl:Album .\r\n?album dbpedia-owl:artist dbpedia:Eminem .\r\n} \r\nLIMIT 100\r\n``` \r\n\r\nTo test the created code, you can use a web frontend of a SPARQL endpoint of DBpedia such as [Virtuoso](http://dbpedia.org/sparql). \r\n\r\nTo fetch results in JSON format inside JavaScript, we have to create a client object that communicates with a SPARQL endpoint. The constructor function Client expects an optional string argument to specify the endpoint. If you do not pass an argument, it will default to *http://dbpedia.org/sparql*. Since we are fine with this in our current application, we can simply type\r\n\r\n``` \r\nvar sparqler = new sparqls.Client();\r\n``` \r\n\r\nWith this object, you can send a multitide of queries, even at the same time. One simply has to pass a Query object to the send method and provide as a second argument a callback function which has two parameters: error and data.\r\n\r\n``` \r\nsparqler.send(myquery, function(error, data){\r\n\tconsole.log(data.results.bindings);\r\n});\r\n```\r\n\r\nBy default, a created SPARQL call we fetch all variables that have been registered. DBpedia provides a nice visual interface which gives you a preview of all the information stored for a certain entity. The URL for the DBpedia entry for Eminems second album, the Marshall Mathers LP, is [http://dbpedia.org/page/The_Marshall_Mathers_LP](http://dbpedia.org/page/The_Marshall_Mathers_LP). For example, we could extend our album object to also include the music genre and the record label:\r\n\r\n```\r\nvar extendedAlbum = { \r\n  \"type\": \"dbpedia-owl:Album\",\r\n  \"dbpedia-owl:artist\" : \"dbpedia:Eminem\",\r\n  \"dbpedia-owl:genre\" : \"?genre\",\r\n  \"dbpedia-owl:recordLabel\" : \"?recordLabel\",\r\n  };\r\n```\r\n\r\nAs you can see here, this query differs from the previous one insofar as it introduces open variables that we want to retrieve but upon which we do not impose any restrictions. We use a starting \"?\" for such a local variable. Using a new query, we can retrieve results as follows:\r\n\r\n``` \r\nvar myquery2 = new sparqls.Query();\r\nmyquery2.registerVariable(\"extendedAlbum\", extendedAlbum);\r\n\r\nsparqler.send(myquery2, function(error, data){\r\n\tconsole.log(util.inspect(data.results.bindings));\r\n});\r\n\r\n``` \r\n\r\n# Further Options\r\n\r\n## Selection\r\nBy default, all registered and other variables are returned in the result set. This corresponds to a \"SELECT *\" statement in SPARQL. However, you might want to reduce the returned data by specifying them explicitly. This is achieved by using the `selection` method of the query object. Assume that we only want to view the record labels of Eminems albums. We can do this by typing\r\n\r\n``` \r\nmyquery2.selection(\"recordLabel\");\r\n``` \r\n\r\nBesides passing a string, it is also possible to supply a multitude of variables arranged in a JavaScript Array. As you may notice, the returned result set contains multiple instances of the different record labels. To only retrieve these instances once, we can use a modifier.\r\n\r\n## Modifiers\r\n\r\n### Distinct \r\nWhen creating a query, we can use the *distinct* option to filter out duplicate instance. All modifiers are set when creating the query object.\r\n\r\n```\r\nvar myquery3 = new sparqls.Query({distinct: true}); \r\n```\r\n\r\n### Reduced\r\n\r\nWhile the distinct modifier ensures that duplicates are eliminated from the result set, reduced just allows them to be eliminated. \r\n\r\n```\r\nvar myquery3 = new sparqls.Query({reduced: true}); \r\n```\r\n\r\n### Limit\r\n\r\nTo limit the size of the result set, we use the limit modifier. \r\n\r\n```\r\nvar myquery3 = new sparqls.Query({limit: 5}); \r\n```\r\n\r\nBy default, a maximum of a hundred entries is returned. \r\n\r\n### Offset\r\n\r\nTo skip the first five results, you can define an offset:\r\n\r\n```\r\nvar myquery3 = new sparqls.Query({offset: 5}); \r\n```\r\n\r\nYou can also combine these modifiers, e.g. as in \r\n\r\n``` \r\nvar myquery3 = new sparqls.Query({offset: 5, limit: 20, reduced: true, distinct: false}); \r\n``` \r\n\r\n## Order By \r\n\r\nThe query object might be ordered by passing a regular SPARQL command to its order method.\r\n\r\n``` \r\nmyquery3.order(\"ASC(?extendedAlbum)\");\r\n``` \r\n\r\n## Filters\r\n\r\nTo refine your query, you can use filters. These again accept valid SPARQL filter expressions. For example, we could only retain results in which the city contains \"New\".\r\n\r\n```\r\nmyquery.filter(\"regex(?city, 'New')\");\r\n```\r\n\r\n## Prefixes\r\n\r\nPrefixes can be creates as follows:\r\n\r\n```\r\nmyquery.registerPrefix(\"dbres\",\"<http://dbpedia.org/resource/>\");\r\n```\r\n\r\nThis important if you use to combine ontologies and query other endpoints than DBpedia. \r\n\r\n## Method Chaining\r\n\r\nOne of the neat features of the SPARQLing star package is that it allows method chaining, that is you can build up your query in one rush like this:\r\n\r\n```\r\nmyquery.registerVariable(\"company\", company)\r\n\t\t.registerVariable(\"city\", city) \r\n\t\t.registerPrefix(\"dbres\",\"<http://dbpedia.org/resource/>\")\r\n\t\t.selection([\"company\",\"num\"])\r\n\t\t.order(\"ASC(?num)\");\r\n``` \r\n\r\nThis sample code is taken from the *companies.js* file. You can find all example code in the *examples* subdirectory of the repository. \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}